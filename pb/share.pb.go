// Code generated by protoc-gen-go. DO NOT EDIT.
// source: share.proto

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	share.proto

It has these top-level messages:
	ExpiresRequest
	BatchGenRequest
	GenRequest
	ServiceResponse
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ExpiresRequest struct {
	Code       string `protobuf:"bytes,1,opt,name=code" json:"code,omitempty"`
	ExtendTime int64  `protobuf:"varint,2,opt,name=extendTime" json:"extendTime,omitempty"`
}

func (m *ExpiresRequest) Reset()                    { *m = ExpiresRequest{} }
func (m *ExpiresRequest) String() string            { return proto.CompactTextString(m) }
func (*ExpiresRequest) ProtoMessage()               {}
func (*ExpiresRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ExpiresRequest) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *ExpiresRequest) GetExtendTime() int64 {
	if m != nil {
		return m.ExtendTime
	}
	return 0
}

type BatchGenRequest struct {
	Name       string   `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Bucket     string   `protobuf:"bytes,2,opt,name=bucket" json:"bucket,omitempty"`
	TargetPath []string `protobuf:"bytes,3,rep,name=targetPath" json:"targetPath,omitempty"`
	ValidTime  int64    `protobuf:"varint,4,opt,name=validTime" json:"validTime,omitempty"`
	Sharer     string   `protobuf:"bytes,5,opt,name=sharer" json:"sharer,omitempty"`
	Public     bool     `protobuf:"varint,6,opt,name=public" json:"public,omitempty"`
}

func (m *BatchGenRequest) Reset()                    { *m = BatchGenRequest{} }
func (m *BatchGenRequest) String() string            { return proto.CompactTextString(m) }
func (*BatchGenRequest) ProtoMessage()               {}
func (*BatchGenRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *BatchGenRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *BatchGenRequest) GetBucket() string {
	if m != nil {
		return m.Bucket
	}
	return ""
}

func (m *BatchGenRequest) GetTargetPath() []string {
	if m != nil {
		return m.TargetPath
	}
	return nil
}

func (m *BatchGenRequest) GetValidTime() int64 {
	if m != nil {
		return m.ValidTime
	}
	return 0
}

func (m *BatchGenRequest) GetSharer() string {
	if m != nil {
		return m.Sharer
	}
	return ""
}

func (m *BatchGenRequest) GetPublic() bool {
	if m != nil {
		return m.Public
	}
	return false
}

type GenRequest struct {
	Name       string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Bucket     string `protobuf:"bytes,2,opt,name=bucket" json:"bucket,omitempty"`
	TargetPath string `protobuf:"bytes,3,opt,name=targetPath" json:"targetPath,omitempty"`
	ValidTime  int64  `protobuf:"varint,4,opt,name=validTime" json:"validTime,omitempty"`
	Sharer     string `protobuf:"bytes,5,opt,name=sharer" json:"sharer,omitempty"`
	Public     bool   `protobuf:"varint,6,opt,name=public" json:"public,omitempty"`
}

func (m *GenRequest) Reset()                    { *m = GenRequest{} }
func (m *GenRequest) String() string            { return proto.CompactTextString(m) }
func (*GenRequest) ProtoMessage()               {}
func (*GenRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *GenRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GenRequest) GetBucket() string {
	if m != nil {
		return m.Bucket
	}
	return ""
}

func (m *GenRequest) GetTargetPath() string {
	if m != nil {
		return m.TargetPath
	}
	return ""
}

func (m *GenRequest) GetValidTime() int64 {
	if m != nil {
		return m.ValidTime
	}
	return 0
}

func (m *GenRequest) GetSharer() string {
	if m != nil {
		return m.Sharer
	}
	return ""
}

func (m *GenRequest) GetPublic() bool {
	if m != nil {
		return m.Public
	}
	return false
}

type ServiceResponse struct {
	Success bool   `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	Code    int64  `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	Data    string `protobuf:"bytes,3,opt,name=data" json:"data,omitempty"`
	Message string `protobuf:"bytes,4,opt,name=message" json:"message,omitempty"`
}

func (m *ServiceResponse) Reset()                    { *m = ServiceResponse{} }
func (m *ServiceResponse) String() string            { return proto.CompactTextString(m) }
func (*ServiceResponse) ProtoMessage()               {}
func (*ServiceResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ServiceResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *ServiceResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *ServiceResponse) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

func (m *ServiceResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*ExpiresRequest)(nil), "pb.ExpiresRequest")
	proto.RegisterType((*BatchGenRequest)(nil), "pb.BatchGenRequest")
	proto.RegisterType((*GenRequest)(nil), "pb.GenRequest")
	proto.RegisterType((*ServiceResponse)(nil), "pb.ServiceResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Share service

type ShareClient interface {
	Gen(ctx context.Context, in *GenRequest, opts ...grpc.CallOption) (*ServiceResponse, error)
	BatchGen(ctx context.Context, in *BatchGenRequest, opts ...grpc.CallOption) (*ServiceResponse, error)
	Expires(ctx context.Context, in *ExpiresRequest, opts ...grpc.CallOption) (*ServiceResponse, error)
}

type shareClient struct {
	cc *grpc.ClientConn
}

func NewShareClient(cc *grpc.ClientConn) ShareClient {
	return &shareClient{cc}
}

func (c *shareClient) Gen(ctx context.Context, in *GenRequest, opts ...grpc.CallOption) (*ServiceResponse, error) {
	out := new(ServiceResponse)
	err := grpc.Invoke(ctx, "/pb.Share/Gen", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shareClient) BatchGen(ctx context.Context, in *BatchGenRequest, opts ...grpc.CallOption) (*ServiceResponse, error) {
	out := new(ServiceResponse)
	err := grpc.Invoke(ctx, "/pb.Share/BatchGen", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shareClient) Expires(ctx context.Context, in *ExpiresRequest, opts ...grpc.CallOption) (*ServiceResponse, error) {
	out := new(ServiceResponse)
	err := grpc.Invoke(ctx, "/pb.Share/Expires", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Share service

type ShareServer interface {
	Gen(context.Context, *GenRequest) (*ServiceResponse, error)
	BatchGen(context.Context, *BatchGenRequest) (*ServiceResponse, error)
	Expires(context.Context, *ExpiresRequest) (*ServiceResponse, error)
}

func RegisterShareServer(s *grpc.Server, srv ShareServer) {
	s.RegisterService(&_Share_serviceDesc, srv)
}

func _Share_Gen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShareServer).Gen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Share/Gen",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShareServer).Gen(ctx, req.(*GenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Share_BatchGen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchGenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShareServer).BatchGen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Share/BatchGen",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShareServer).BatchGen(ctx, req.(*BatchGenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Share_Expires_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExpiresRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShareServer).Expires(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Share/Expires",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShareServer).Expires(ctx, req.(*ExpiresRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Share_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Share",
	HandlerType: (*ShareServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Gen",
			Handler:    _Share_Gen_Handler,
		},
		{
			MethodName: "BatchGen",
			Handler:    _Share_BatchGen_Handler,
		},
		{
			MethodName: "Expires",
			Handler:    _Share_Expires_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "share.proto",
}

func init() { proto.RegisterFile("share.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 324 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x52, 0xcb, 0x4a, 0xc3, 0x40,
	0x14, 0x75, 0x9a, 0xbe, 0x72, 0x85, 0x16, 0xae, 0x20, 0x41, 0x44, 0x42, 0x56, 0x59, 0x48, 0x17,
	0x2a, 0x7e, 0x80, 0x28, 0xdd, 0xca, 0xd4, 0x1f, 0x98, 0x4c, 0x2f, 0x6d, 0xb0, 0x79, 0x38, 0x33,
	0x29, 0xfd, 0x1f, 0xc1, 0x8d, 0x3f, 0x29, 0x33, 0x93, 0x3e, 0x2c, 0x74, 0xa7, 0xbb, 0x7b, 0x0e,
	0x73, 0xcf, 0x3d, 0xc9, 0x39, 0x70, 0xae, 0x97, 0x42, 0xd1, 0xa4, 0x56, 0x95, 0xa9, 0xb0, 0x53,
	0x67, 0xc9, 0x33, 0x8c, 0x5e, 0x36, 0x75, 0xae, 0x48, 0x73, 0xfa, 0x68, 0x48, 0x1b, 0x44, 0xe8,
	0xca, 0x6a, 0x4e, 0x11, 0x8b, 0x59, 0x1a, 0x72, 0x37, 0xe3, 0x0d, 0x00, 0x6d, 0x0c, 0x95, 0xf3,
	0xb7, 0xbc, 0xa0, 0xa8, 0x13, 0xb3, 0x34, 0xe0, 0x07, 0x4c, 0xf2, 0xcd, 0x60, 0xfc, 0x24, 0x8c,
	0x5c, 0x4e, 0xa9, 0x3c, 0xd0, 0x29, 0x45, 0xb1, 0xd3, 0xb1, 0x33, 0x5e, 0x42, 0x3f, 0x6b, 0xe4,
	0x3b, 0x19, 0xa7, 0x11, 0xf2, 0x16, 0x59, 0x7d, 0x23, 0xd4, 0x82, 0xcc, 0xab, 0x30, 0xcb, 0x28,
	0x88, 0x83, 0x34, 0xe4, 0x07, 0x0c, 0x5e, 0x43, 0xb8, 0x16, 0xab, 0xdc, 0x9f, 0xef, 0xba, 0xf3,
	0x7b, 0xc2, 0xaa, 0xba, 0xcf, 0x52, 0x51, 0xcf, 0xab, 0x7a, 0x64, 0xf9, 0xba, 0xc9, 0x56, 0xb9,
	0x8c, 0xfa, 0x31, 0x4b, 0x87, 0xbc, 0x45, 0xc9, 0x17, 0x03, 0xf8, 0x23, 0xa3, 0xec, 0x5f, 0x8d,
	0x16, 0x30, 0x9e, 0x91, 0x5a, 0xe7, 0x92, 0x38, 0xe9, 0xba, 0x2a, 0x35, 0x61, 0x04, 0x03, 0xdd,
	0x48, 0x49, 0x5a, 0x3b, 0xbf, 0x43, 0xbe, 0x85, 0xbb, 0xdc, 0x7c, 0x3a, 0x3e, 0x37, 0x84, 0xee,
	0x5c, 0x18, 0xd1, 0x1a, 0x75, 0xb3, 0x55, 0x28, 0x48, 0x6b, 0xb1, 0xf0, 0x06, 0x43, 0xbe, 0x85,
	0x77, 0x9f, 0x0c, 0x7a, 0x33, 0xeb, 0x08, 0x6f, 0x21, 0x98, 0x52, 0x89, 0xa3, 0x49, 0x9d, 0x4d,
	0xf6, 0x7f, 0xea, 0xea, 0xc2, 0xe2, 0x23, 0x47, 0xc9, 0x19, 0x3e, 0xc2, 0x70, 0x1b, 0x3e, 0xba,
	0x27, 0x47, 0x55, 0x38, 0xb5, 0xf7, 0x00, 0x83, 0xb6, 0x7b, 0x88, 0xf6, 0xc5, 0xef, 0x22, 0x9e,
	0xd8, 0xca, 0xfa, 0xae, 0xbc, 0xf7, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xe1, 0x48, 0x1f, 0x41,
	0xcb, 0x02, 0x00, 0x00,
}
